openapi: 3.0.3
info:
  title: Chat Application API
  description: |
    RESTful API for a chat application supporting user registration, authentication, group creation, and messaging.
    Protected endpoints require JWT authentication with ROLE_USER.
  version: 1.0.0
servers:
  - url: http://localhost:38080
    description: Local development server
paths:
  /api/auth/login:
    post:
      summary: Authenticate a user and return a JWT token
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful login, returns JWT token
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token for authentication
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '400':
          description: Invalid credentials or request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/users/register:
    post:
      summary: Register a new user
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatUser'
      responses:
        '200':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User registered successfully
                  id:
                    type: string
                    format: uuid
                    example: 123e4567-e89b-12d3-a456-426614174000
                  username:
                    type: string
                    example: urnassme
                  email:
                    type: string
                    example: user@example.com
                    nullable: true
        '400':
          description: Invalid input or user/email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/users/{userId}:
    get:
      summary: Get user details by ID
      operationId: getUser
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174000
      responses:
        '200':
          description: User details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/users:
    get:
      summary: Get all users
      operationId: getUsers
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                      example: 123e4567-e89b-12d3-a456-426614174000
                    username:
                      type: string
                      example: urnassme
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/groups/create:
    post:
      summary: Create a new group
      operationId: createGroup
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatGroup'
      responses:
        '200':
          description: Group created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Group created successfully
                  id:
                    type: string
                    format: uuid
                    example: 123e4567-e89b-12d3-a456-426614174000
                  name:
                    type: string
                    example: Group_q
        '400':
          description: Invalid input or group name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/groups:
    get:
      summary: Get all groups
      operationId: getGroups
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of all groups
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                      example: 123e4567-e89b-12d3-a456-426614174000
                    name:
                      type: string
                      example: Group_q
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/messages/private:
    post:
      summary: Send a private message
      operationId: sendPrivateMessage
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
      responses:
        '200':
          description: Message sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Message sent successfully
        '400':
          description: Invalid input or sender/recipient not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/messages/private/conversation/{otherUserId}:
    get:
      summary: Get private conversation messages
      operationId: getPrivateMessages
      security:
        - bearerAuth: []
      parameters:
        - name: otherUserId
          in: path
          required: true
          schema:
            type: string
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174000
        - name: since
          in: query
          required: false
          schema:
            type: string
            format: date-time
            example: 2025-06-01T00:00:00
      responses:
        '200':
          description: List of private messages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        '400':
          description: Invalid input or user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/messages/private/history/{otherUserId}:
    get:
      summary: Get private chat history
      operationId: getPrivateChatHistory
      security:
        - bearerAuth: []
      parameters:
        - name: otherUserId
          in: path
          required: true
          schema:
            type: string
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174000
      responses:
        '200':
          description: List of private chat history messages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        '400':
          description: Invalid input or user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/messages/group:
    post:
      summary: Send a group message
      operationId: sendGroupMessage
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
      responses:
        '200':
          description: Message sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Message sent successfully
        '400':
          description: Invalid input or group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/messages/group/{groupId}:
    get:
      summary: Get group messages
      operationId: getGroupMessages
      security:
        - bearerAuth: []
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174000
      responses:
        '200':
          description: List of group messages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/messages/search:
    get:
      summary: Search messages by keyword and/or time range
      operationId: searchMessages
      security:
        - bearerAuth: []
      parameters:
        - name: keyword
          in: query
          required: false
          schema:
            type: string
            example: hello
        - name: start
          in: query
          required: false
          schema:
            type: string
            format: date-time
            example: 2025-06-01T00:00:00
        - name: end
          in: query
          required: false
          schema:
            type: string
            format: date-time
            example: 2025-06-03T23:59:59
      responses:
        '200':
          description: List of matching messages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        '400':
          description: Invalid input or timestamp format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: urnassme
        password:
          type: string
          example: password123
    ChatUser:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: urnassme
        password:
          type: string
          example: password123
        birthdate:
          type: string
          format: date
          example: 01-01-1990
        email:
          type: string
          example: user@example.com
          nullable: true
        phone:
          type: string
          example: +1234567890
          nullable: true
        avatarUrl:
          type: string
          example: https://example.com/avatar.jpg
          nullable: true
    UserResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        username:
          type: string
          example: urnassme
        birthdate:
          type: string
          format: date
          example: 01-01-1990
          nullable: true
        email:
          type: string
          example: user@example.com
          nullable: true
        phone:
          type: string
          example: +1234567890
          nullable: true
        avatarUrl:
          type: string
          example: https://example.com/avatar.jpg
          nullable: true
    ChatGroup:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: Group_q
    Message:
      type: object
      required:
        - content
        - senderId
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        content:
          type: string
          example: Hello
        senderId:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        recipientId:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
          nullable: true
        groupId:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
          nullable: true
        chatType:
          type: string
          enum:
            - PRIVATE
            - GROUP
          example: PRIVATE
        timestamp:
          type: string
          format: date-time
          example: 2025-06-01T12:00:00
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: Invalid credentials
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []